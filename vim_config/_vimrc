" ========== General Settings ==========
syntax on
filetype plugin indent on   " Enable file type detection, plugins, and indentation
set nocompatible            " Use Vim defaults instead of 100% vi compatibility
set encoding=utf-8
set fileformats=unix,dos,mac
set hidden
set ruler
set laststatus=2            " Always show the status line
set showcmd                 " Show (partial) command in status line
set cmdheight=1             " Set command-line height to 1
set showmatch               " Show matching brackets
set matchtime=0             " No delay when showing matching brackets
set nobackup nowritebackup noswapfile
set nowrap                  " Don't wrap long lines
set scrolloff=8             " Keep 8 lines above and below the cursor
set sidescrolloff=15        " Keep 15 columns to the left and right of the cursor
set noundofile
set termguicolors           " Enable true color support
set t_Co=256                " Enable 256 colors
set number relativenumber
set cursorline
set wildmenu
set timeoutlen=100
set updatetime=100
set clipboard+=unnamed
set mouse=a
set foldmethod=syntax       " Use syntax-based folding
set nofoldenable            " Don't fold by default
set completeopt=menuone,longest,noinsert,noselect " Better completion behavior
set wildmenu                " Enable command-line completion menu
set wildmode=longest:full   " Complete till longest common string and show menu

" ========== Editing ==========
set tabstop=4 shiftwidth=4 expandtab
set smartindent autoindent
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set shiftround              " Round indent to multiple of 'shiftwidth'

" ========== Search ==========
set ignorecase smartcase
set incsearch hlsearch
nmap <Esc> :noh<CR>

" ==================== Custom Mappings ====================
nmap n gn
nmap N gN
let g:mapleader ="\<Space>"
let g:maplocalleader = ","
noremap <silent><leader> :WhichKey '<Space>'<CR>
noremap <silent><localleader> :WhichKey ','<CR>
noremap <leader>w :wq<CR>
inoremap <leader>w <Esc>:w<CR>
inoremap jk <Esc>`^
" use C-h/j/k/l switch window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" ==================== Plugin Management ====================
call plug#begin()

" File Navigation and Management
  Plug 'scrooloose/nerdtree',{'on':'NERDTreeToggle'}
  Plug 'kristijanhusak/defx-icons'
  Plug 'kristijanhusak/defx-git'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() }}
  Plug 'junegunn/fzf.vim'
  
" UI Enhancements
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'yggdroot/indentline'
  Plug 'mhinz/vim-startify'

" Code Navigation and Editing
  Plug 'tpope/vim-surround'
  Plug 'wellle/targets.vim'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
 
 " Motion and Search
  Plug 'justinmk/vim-sneak'
  Plug 'easymotion/vim-easymotion'

" Key Mapping Helper
  Plug 'liuchengxu/vim-which-key'

" Themes
  Plug 'morhetz/gruvbox'
  Plug 'ghifarit53/tokyonight-vim'
 
" Additional Plugins
  Plug 'mg979/vim-visual-multi', {'branch': 'master'}
  Plug 'skywind3000/asyncrun.vim'
  Plug 'ryanoasis/vim-devicons'
  Plug 'junegunn/goyo.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  Plug 'vim-syntastic/syntastic'
call plug#end()

" ========== colorscheme ==========
" colorscheme gruvbox
" let g:airline_theme = "gruvbox"
let g:tokyonight_style = 'storm' 
let g:tokyonight_enable_italic = 1
let g:airline_theme = "tokyonight"
colorscheme tokyonight
let g:airline#extensions#tabline#enabled = 1 " 让 buffer 显示在顶部
let g:airline_powerline_fonts = 1

" ========== cursor config ==========
if has('win64')
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"
    let &t_SR = "\e[4 q"
endif
" if &term =~ 'xterm\\|conemu\\|vtpcon'
"     let &t_SI = "\e[6 q"  " 插入模式为竖线
"     let &t_SR = "\e[4 q"  " 替换模式为下划线
"     let &t_EI = "\e[2 q"  " 普通模式为块状
"     [1 q :闪烁的方块光标
"     [2 q :稳定的方块光标
"     [3 q :闪烁的下划线光标
"     [4 q :稳定的下划线光标
"     [5 q :闪烁的竖线光标
"     [6 q :稳定的竖线光标
" endif

" set guicursor=n-v-c:block-Cursor/lCursor
" set guicursor+=i:ver25-Cursor
" set guicursor+=r:hor20-Cursor

" ========== fzf ==========
noremap <leader>f :Files<CR>
noremap <leader>b :Buffers<CR>
noremap <leader>g :Rg<CR>

" ========== Asyncrun ==========
noremap <leader>r :AsyncRun -mode=terminal %<CR>

" ========== 其他优化 ==========
set splitright splitbelow
noremap <leader>e :!start explorer %:p:h<CR>

" ========== 终端模式 ==========
noremap <C-t> :term<CR>
tnoremap <C-t> <C-\><C-n>:bd!<CR>

" ========== 文件管理 ==========
map <M-n> :NERDTreeToggle<CR>
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_mark_icon = '*'
let g:defx_git#indicators = { 'Modified': '✹', 'Staged': '✚', 'Untracked': '✭', 'Renamed': '➜', 'Unmerged': '═', 'Deleted': '✖', 'Dirty': '✗', 'Ignored': '☒', 'Clean': '✔︎', 'Unknown': '?' }

" ========== Goyo ==========
noremap <leader>z :Goyo<CR>

" ========== EasyMotion / Sneak ==========
nmap f <Plug>Sneak_s
nmap F <Plug>Sneak_S
map <Leader> <Plug>(easymotion-prefix)
nmap <leader>ss <Plug>(easymotion-s2)

" ========== WhichKey ==========
let g:which_key_map = {}
let g:which_key_map.f = { 'name' : '+file' }
nnoremap <silent> <leader>fs :update<CR>
let g:which_key_map.f.s = 'save-file'

nnoremap <silent> <leader>fd :e $MYVIMRC<CR>
let g:which_key_map.f.d = 'open-vimrc'

nnoremap <silent> <leader>oq  :copen<CR>
nnoremap <silent> <leader>ol  :lopen<CR>
let g:which_key_map.o = {
      \ 'name' : '+open',
      \ 'q' : 'open-quickfix',
      \ 'l' : 'open-locationlist',
      \ }

let g:which_key_map.b = {
      \ 'name' : '+buffer' ,
      \ '1' : ['b1'        , 'buffer 1']        ,
      \ '2' : ['b2'        , 'buffer 2']        ,
      \ 'd' : ['bd'        , 'delete-buffer']   ,
      \ 'f' : ['bfirst'    , 'first-buffer']    ,
      \ 'h' : ['Startify'  , 'home-buffer']     ,
      \ 'l' : ['blast'     , 'last-buffer']     ,
      \ 'n' : ['bnext'     , 'next-buffer']     ,
      \ 'p' : ['bprevious' , 'previous-buffer'] ,
      \ '?' : ['Buffers'   , 'fzf-buffer']      ,
      \ }

let g:which_key_map.l = {
      \ 'name' : '+lsp'                                            ,
      \ 'f' : ['LanguageClient#textDocument_formatting()'     , 'formatting']       ,
      \ 'h' : ['LanguageClient#textDocument_hover()'          , 'hover']            ,
      \ 'r' : ['LanguageClient#textDocument_references()'     , 'references']       ,
      \ 'R' : ['LanguageClient#textDocument_rename()'         , 'rename']           ,
      \ 's' : ['LanguageClient#textDocument_documentSymbol()' , 'document-symbol']  ,
      \ 'S' : ['LanguageClient#workspace_symbol()'            , 'workspace-symbol'] ,
      \ 'g' : {
        \ 'name': '+goto',
        \ 'd' : ['LanguageClient#textDocument_definition()'     , 'definition']       ,
        \ 't' : ['LanguageClient#textDocument_typeDefinition()' , 'type-definition']  ,
        \ 'i' : ['LanguageClient#textDocument_implementation()'  , 'implementation']  ,
        \ },
      \ }
call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>
nnoremap <silent> ] :<c-u>WhichKey ']'<CR>
nnoremap <silent> [ :<c-u>WhichKey '['<CR>

" ========== Startify ==========
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1
let g:startify_files_number = 10

" ============regular==========
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %s/\v
nnoremap :g/ :g/\v

