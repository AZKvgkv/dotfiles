#oh-my-posh init pwsh --config 'D:\Applications\Scoop\apps\oh-my-posh\current\themes\craver.omp.json' | Invoke-Expression
#oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH/robbyrussell.omp.json" | Invoke-Expression

# T0
#oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH/craver.omp.json" | Invoke-Expression
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH/di4am0nd.omp.json" | Invoke-Expression






Set-PSReadLineOption -EditMode Emacs
#Invoke-Expression (&starship init powershell)

Import-Module DirColors

Import-Module -Name Terminal-Icons

Set-Alias vi 'vim'
Set-Alias c 'cls'
Set-Alias o 'gvim'
Set-Alias yz 'D:\!Workbenches\007_software\yazi-x86_64-pc-windows-msvc\yazi.exe'
Set-Alias f 'fastfetch'
Set-Alias n 'nvim'
Set-Alias m 'micro'
Set-Alias g 'git'

function ll {lsd -l}

function as {
    $env:NVIM_APPNAME="AstroNvim"
    nvim $args
}

function az {
    $env:NVIM_APPNAME="az_nvim"
    nvim $args
}

function hd {
    $env:NVIM_APPNAME="HardNvim"
    nvim $args
}

function lz {
    $env:NVIM_APPNAME="LazyVim"
    nvim $args
}

function nm{
	$env:NVIM_APPNAME="NormalNvim"
	nvim $args
}


function nc {
    $env:NVIM_APPNAME="NvChad"
    nvim $args
}

function kk {
    $env:NVIM_APPNAME="Kickstart"
    nvim $args
}

function n {nvim}

function ns {
    $items = @("Default", "AstroNvim", "Kickstart", "LazyVim","NormalNvim", "NvChad")
    $config = $items | fzf --prompt=" 󰔰  Neovim ⚡AZ's Config 󰶻" --height=~50% --layout=reverse --border --exit-0

    if ([string]::IsNullOrEmpty($config)) {
        Write-Output "Nothing selected"
        return 0
    } elseif ($config -eq "default") {
        $config = ""
    }

    $env:NVIM_APPNAME = $config
    nvim $args
}

function Get-CommandPath {
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$name
    )

    (Get-Command $name).Path
}
New-Alias -Name which -Value Get-CommandPath


$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path($ChocolateyProfile)) {
  Import-Module "$ChocolateyProfile"
}

# 设置预测文本来源为历史记录
Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -PredictionViewStyle ListView
# Set-PSReadLineOption -PredictionViewStyle InlineView

# 设置 Tab 键补全
Set-PSReadlineKeyHandler -Key Tab -Function Complete

# 设置 Ctrl+d 为菜单补全和 Intellisense
Set-PSReadLineKeyHandler -Key "Ctrl+d" -Function MenuComplete

# 设置 Ctrl+z 为撤销
Set-PSReadLineKeyHandler -Key "Ctrl+z" -Function Undo

# 设置向上键为后向搜索历史记录
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward

# 设置向下键为前向搜索历史纪录
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward



# 20250117
# Unix-like `touch`
function Update-File {
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Path
    )

    if (Test-Path $Path) {
        (Get-ChildItem $Path).LastWriteTime = Get-Date
    }
    else {
        New-Item -Path $Path -ItemType file
    }
}
New-Alias -Name touch -Value Update-File

# Get the size of a directory. (Alias: gds)
function Get-DirectorySize {
    param (
        [string]$Path
    )

    $bytes = (Get-ChildItem $Path -Recurse -File | Measure-Object -Property Length -Sum).Sum
    if ($bytes -lt 1KB) {
        "$bytes Bytes"
    }
    elseif ($bytes -lt 1MB) {
        "$([math]::Round($bytes / 1KB, 2)) KB"
    }
    elseif ($bytes -lt 1GB) {
        "$([math]::Round($bytes / 1MB, 2)) MB"
    }
    else {
        "$([math]::Round($bytes / 1GB, 2)) GB"
    }
}
New-Alias -Name gds -Value Get-DirectorySize

# Copy the contents of a file to the clipboard. (Alias: copyfile)
function Copy-FileContentToClipboard {
    param (
        [string]$FilePath
    )

    Get-Content -Path $FilePath | Set-Clipboard
}
New-Alias -Name copyfile -Value Copy-FileContentToClipboard

# Copies the path of given directory or file to the clipboard. (Alias: copypath)
# Copy current directory if no parameter.
function Copy-Path {
    param (
        [string]$Path = (Get-Location).Path
    )

    # Resolve the path to an absolute path (but not resolving symlinks)
    $AbsolutePath = Resolve-Path -LiteralPath $Path

    # Copy the path to the clipboard
    $AbsolutePath | Set-Clipboard

    # Output the bold path, followed by a cute kaomoji
    Write-Host "`e[1m$AbsolutePath`e[0m copied to clipboard."
}
New-Alias -Name copypath -Value Copy-Path


Set-PsFzfOption -PSReadlineChordProvider 'Ctrl+t' -PSReadlineChordReverseHistory 'Ctrl+r'
Set-PSReadLineKeyHandler -Key Tab -ScriptBlock { Invoke-FzfTabCompletion }